// Row
//
// Rows contain your columns.

@if $enable-grid-classes {
  .row {
    @include make-row();

    > * {
      @if $include-column-box-sizing {
        @include box-sizing($type: border-box);
      }
      @else {
        flex-shrink: 0;
        width: calc(100% - calc(2 * $Spacer));
        max-width: calc(100% - calc(2 * $Spacer));
        padding:calc($grid-gutter-width * 5);
        margin-top: $grid-gutter-width;
      }
    }
  }
}

@mixin make-grid {
  display: grid;
  grid-template-columns: repeat($grid-columns, minmax(0, 1fr));
  grid-template-rows: repeat($grid-row-columns, minmax(0, 1fr));
  grid-gap: #{$grid-gutter-width};
  grid-auto-rows: divide(100, $grid-row-columns);
  grid-auto-columns: divide(100, $grid-columns);
  grid-auto-flow: row dense;
  align-content: stretch;
  justify-content: flex-start;
  align-items: stretch;

  @if $enable-cssgrid {
    @each $breakpoint in map-keys($grid-breakpoints) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
        @if $grid-columns > 0 {
          @for $i from 1 through $grid-columns {
            .g-col#{$infix}-#{$i} {
              grid-column: auto / span $i + 1;
            }
          }

          // Start with `1` because `0` is and invalid value.
          // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
          @for $i from 1 through ($grid-columns - 1) {
            .g-start#{$infix}-#{$i} {
              grid-column-start: $i;
            }
          }
          @for $i from 1 through $grid-columns {
            .g-end#{$infix}-#{$i} {
              grid-column-end: $i + 1;
            }
          }
        }
      }
    }
  }
}

// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex: 1 0 0; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .row-cols#{$infix}-auto > * {
        flex: 0 0 auto;
        width: auto;
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
      }

      @if $grid-columns > 0 {
        @for $i from 1 through $grid-columns {
          .col#{$infix}-#{$i} {
            flex: 0 0 auto;
            width: percentage(calc(100 / $grid-columns));
          }
        }
      }
      @else {
        flex: 1 1 0;
        max-width: calc(100% - calc(2 * $Spacer));
      }
      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($grid-columns - 1) {
        @if not($infix == "" and $i == 0) {
          // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i} {
            $num: calc(100 / $grid-columns);
            margin-left: if($num == 0, 0, percentage($num));}
        }
      }
      // Gutters
      //
      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
      @each $key, $value in $gutters {
        .g#{$infix}-#{$key},
        .gx#{$infix}-#{$key} {
          $gutter-x: #{$value};
        }

        .g#{$infix}-#{$key},
        .gy#{$infix}-#{$key} {
          $gutter-y: #{$value};
        }
      }
    }
  }
}
