// This mixin uses an `if()` technique to be compatible with Dart Sass

@mixin form-validation-state-selector($state) {
  @if ($state == "valid" or $state == "invalid") {
    .was-validated #{if(&, "&", "")}:#{$state},
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  } @else {
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  }
}

@mixin form-validation-state(
  $state,
  $color,
  $icon,
  $TooltipText: color-contrast($color),
  $Tooltip--bg-color: rgba($color, $FormFeedback-TooltipOpacity),
  $focus-box-shadow: inset 0 1px 2px $BorderWidth-focus rgba($color, $FormText-opacity)
) {
  .#{$state}-feedback {
    display: none;
    width: calc(100% - calc(2 * $Spacer));
    margin-top: $FormFeedback-margin-top;
    //@include font-size($FormFeedbackSize);
    font-style: $FormStyle-feedback;
    color: $color;
  }

  .#{$state}-tooltip {
    position: absolute;
    top: 100%;
    z-index: 5;
    display: none;
    max-width: calc(100% - calc(2 * $Spacer)); // Contain to parent when possible
    padding: $FormFeedback-Tooltip-OffsetHorizontal $FormFeedback-Tooltip-OffsetVertical;
    margin-top: .1rem;
    //@include font-size($FormFeedback-tooltipSize);
    line-height: $FormFeedback-Tooltip-Height;
    color: $TooltipText;
    background-color: $Tooltip--bg-color;
    @include border-radius($FormFeedback-Tooltip--border-radius);
  }

  @include form-validation-state-selector($state) {
    ~ .#{$state}-feedback,
    ~ .#{$state}-tooltip {
      display: block;
    }
  }

  .form-control {
    @include form-validation-state-selector($state) {
      border-color: $color;

      @if $enable-validation-icons {
        padding-right: $FormContainer-inner;
        background-image: escape-svg($icon);
        background-repeat: no-repeat;
        background-position: right $FormContainer-inner-quarter center;
        background-size: $FormContainer-inner-half $FormContainer-inner-half;
      }

      &:focus {
        border-color: $color;
        box-shadow: $focus-box-shadow;
      }
    }
  }

  // stylelint-disable-next-line selector-no-qualifying-type
  textarea.form-control {
    @include form-validation-state-selector($state) {
      @if $enable-validation-icons {
        padding-right: $FormContainer-inner;
        background-position: top $FormContainer-inner-quarter right $FormContainer-inner-quarter;
      }
    }
  }

  .form-select {
    @include form-validation-state-selector($state) {
      border-color: $color;

      @if $enable-validation-icons {
        &:not([multiple]):not([size]),
        &:not([multiple])[size="1"] {
          padding-right: $form--select-feedback-icon-Offset-end;
          background-image: escape-svg($form--select-indicator), escape-svg($icon);
          background-position: $form--select-bg-position, $form--select-feedback-icon-position;
          background-size: $form--select-bg-size, $form--select-feedback-icon-size;
        }
      }

      &:focus {
        border-color: $color;
        box-shadow: $focus-box-shadow;
      }
    }
  }

  .form-check-input {
    @include form-validation-state-selector($state) {
      border-color: $color;

      &:checked {
        background-color: $color;
      }

      &:focus {
        box-shadow: $focus-box-shadow;
      }

      ~ .form-check-label {
        color: $color;
      }
    }
  }
  .form-check-inline .form-check-input {
    ~ .#{$state}-feedback {
      margin-left: .5em;
    }
  }

  .input-group .form-control,
  .input-group .form-select {
    @include form-validation-state-selector($state) {
      @if $state == "valid" {
        z-index: 1;
      } @else if $state == "invalid" {
        z-index: 2;
      }
      &:focus {
        z-index: 3;
      }
    }
  }
}
